// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"golang-boilerplate/ent/vendor"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Vendor is the model entity for the Vendor schema.
type Vendor struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Vendor holds the value of the "vendor" field.
	Vendor string `json:"vendor,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VendorQuery when eager-loading is set.
	Edges VendorEdges `json:"edges"`
}

// VendorEdges holds the relations/edges for other nodes in the graph.
type VendorEdges struct {
	// Item holds the value of the item edge.
	Item []*Item `json:"item,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedItem map[string][]*Item
}

// ItemOrErr returns the Item value or an error if the edge
// was not loaded in eager-loading.
func (e VendorEdges) ItemOrErr() ([]*Item, error) {
	if e.loadedTypes[0] {
		return e.Item, nil
	}
	return nil, &NotLoadedError{edge: "item"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Vendor) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case vendor.FieldVendor:
			values[i] = new(sql.NullString)
		case vendor.FieldCreatedAt, vendor.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case vendor.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Vendor", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Vendor fields.
func (v *Vendor) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case vendor.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				v.ID = *value
			}
		case vendor.FieldVendor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field vendor", values[i])
			} else if value.Valid {
				v.Vendor = value.String
			}
		case vendor.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				v.CreatedAt = value.Time
			}
		case vendor.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				v.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryItem queries the "item" edge of the Vendor entity.
func (v *Vendor) QueryItem() *ItemQuery {
	return (&VendorClient{config: v.config}).QueryItem(v)
}

// Update returns a builder for updating this Vendor.
// Note that you need to call Vendor.Unwrap() before calling this method if this Vendor
// was returned from a transaction, and the transaction was committed or rolled back.
func (v *Vendor) Update() *VendorUpdateOne {
	return (&VendorClient{config: v.config}).UpdateOne(v)
}

// Unwrap unwraps the Vendor entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (v *Vendor) Unwrap() *Vendor {
	_tx, ok := v.config.driver.(*txDriver)
	if !ok {
		panic("ent: Vendor is not a transactional entity")
	}
	v.config.driver = _tx.drv
	return v
}

// String implements the fmt.Stringer.
func (v *Vendor) String() string {
	var builder strings.Builder
	builder.WriteString("Vendor(")
	builder.WriteString(fmt.Sprintf("id=%v, ", v.ID))
	builder.WriteString("vendor=")
	builder.WriteString(v.Vendor)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(v.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(v.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NamedItem returns the Item named value or an error if the edge was not
// loaded in eager-loading with this name.
func (v *Vendor) NamedItem(name string) ([]*Item, error) {
	if v.Edges.namedItem == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := v.Edges.namedItem[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (v *Vendor) appendNamedItem(name string, edges ...*Item) {
	if v.Edges.namedItem == nil {
		v.Edges.namedItem = make(map[string][]*Item)
	}
	if len(edges) == 0 {
		v.Edges.namedItem[name] = []*Item{}
	} else {
		v.Edges.namedItem[name] = append(v.Edges.namedItem[name], edges...)
	}
}

// Vendors is a parsable slice of Vendor.
type Vendors []*Vendor

func (v Vendors) config(cfg config) {
	for _i := range v {
		v[_i].config = cfg
	}
}
