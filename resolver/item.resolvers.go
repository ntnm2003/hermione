package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.38

import (
	"context"
	"golang-boilerplate/ent"
	graphql1 "golang-boilerplate/graphql"
	"golang-boilerplate/model"
)

// ID is the resolver for the id field.
func (r *itemResolver) ID(ctx context.Context, obj *ent.Item) (string, error) {
	return obj.ID.String(), nil
}

// VendorID is the resolver for the vendorID field.
func (r *itemResolver) VendorID(ctx context.Context, obj *ent.Item) (*ent.Vendor, error) {
	return obj.Edges.Vendor, nil
}

// Create is the resolver for the create field.
func (r *itemOpsResolver) Create(ctx context.Context, obj *model.ItemOps, input model.CreateItemInput) (*ent.Item, error) {
	return r.service.Item().Create(ctx, input)
}

// Buy is the resolver for the buy field.
func (r *itemOpsResolver) Buy(ctx context.Context, obj *model.ItemOps, input model.BuyItemInput) (*ent.Item, error) {
	return r.service.Item().Buy(ctx, input)
}

// List is the resolver for the list field.
func (r *itemQueriesResolver) List(ctx context.Context, obj *model.ItemQueries) ([]*ent.Item, error) {
	return r.service.Item().List(ctx)
}

// TopList is the resolver for the topList field.
func (r *itemQueriesResolver) TopList(ctx context.Context, obj *model.ItemQueries) ([]*ent.Item, error) {
	return r.service.Item().TopList(ctx)
}

// ExpList is the resolver for the expList field.
func (r *itemQueriesResolver) ExpList(ctx context.Context, obj *model.ItemQueries) ([]*ent.Item, error) {
	return r.service.Item().ExpList(ctx)
}

// Revenue is the resolver for the revenue field.
func (r *itemQueriesResolver) Revenue(ctx context.Context, obj *model.ItemQueries, id string) (*int, error) {
	return r.service.Item().Revenue(ctx, &id)
}

// Items is the resolver for the items field.
func (r *mutationResolver) Items(ctx context.Context) (*model.ItemOps, error) {
	return &model.ItemOps{}, nil
}

// Item is the resolver for the item field.
func (r *queryResolver) Item(ctx context.Context) (*model.ItemQueries, error) {
	return &model.ItemQueries{}, nil
}

// Item returns graphql1.ItemResolver implementation.
func (r *Resolver) Item() graphql1.ItemResolver { return &itemResolver{r} }

// ItemOps returns graphql1.ItemOpsResolver implementation.
func (r *Resolver) ItemOps() graphql1.ItemOpsResolver { return &itemOpsResolver{r} }

// ItemQueries returns graphql1.ItemQueriesResolver implementation.
func (r *Resolver) ItemQueries() graphql1.ItemQueriesResolver { return &itemQueriesResolver{r} }

type itemResolver struct{ *Resolver }
type itemOpsResolver struct{ *Resolver }
type itemQueriesResolver struct{ *Resolver }
